Planning BJ  - #12 Cont 

D -  Step 1: Familiarize yourself with the HTML and JS
Project comes with some HTML and some JavaScript already included. Familiarize yourself with the HTML that is already there to see what DOM elements the browser will create when the document is loaded by the browser. 

VIEWED AFTER WATCHING SEVERAL BLACK JACK GAMES I SEE I WILL NEED BUTTONS AND EVENTS 


HTML & JavaScript Code      
 (Links to an external site.)

D - Step 2: Style the page
Style the page to make it look more like a card table. This exercise is less about styling, so do not spend more than 45-60 minutes on styling at this time. You can always revisit the styling later. Here is an example: 

- FOUND IMAGE ON LINE TO REPLACE THAT LOOKS MORE LIKE TABLE 
Upload to BJ  file 

X- SOURCE CODE? BODY? 
￼
D - link to that stylesheet from the head and move on to the next step. 

D - Researched an online BJ game to see how user interface worked. 

Step 3: Cards on the table
To get an idea of what the cards will look like, we are going to "hard-code" them first, then you javascript to add the right card later. 

Start by adding the HTML for an img tag inside of the #dealer-hand or #player-hand element and have them link (set the src attribute) to card images in the images folder.

GOOGLED HARD CODE RESEARCH - ? 

- Add images from file - create a path - to images 
- 3 BUTTONS - DEAL, HIT, STAND 


￼


Step 4: Dealing the cards
Now that we know what we want the HTML to look like, we can remove the cards we created in step 3. 

This time we will generate them dynamically using JavaScript. When the "Deal" button is clicked, deal 4 times. Once to the player, once to the dealer, then the player and then to the dealer.
We will need to attach an event listener to the button, create a new image element and append it to the #dealer-hand and the #player-hand elements. At this point, you can just use the same card.

- UI GAME 	- interactivity ? 
- * WHEN - IF DEAL BUTTON CLICKED - THEN 4 CARDS: 
- PLAYER 
- DEALER, 
- PLAYER 
- DEALER 
- ATTACH EVENT LISTENER TO BUTTON - CLICK 

/ Step 4
document.getElementById(“deal-button”).addEventListener(“click”, dealCard);
function dealCard() {
    let card = document.createElement(“img”);
    let dealerOrPlayer = “dealer”;
    const dealer = document.getElementById(“dealer-hand”);
    const player = document.getElementById(“player-hand”);
    for (let index = 0; index < 4; index++) {
        const card = document.createElement(“img”);
        card.src = “ace_of_spades.png”;
        card.height = 130;
        card.width = 90;
        console.log(index);
        if (dealerOrPlayer == “dealer”) {
            console.log(“dealer”)
            dealer.appendChild(card);
        } else {
            console.log(“player”)
            player.appendChild(card);
        }
        if (index == 1) {
            dealerOrPlayer = “player”;
        }
    }
}
//

Step 5: Hit me
When the "Hit" button is clicked, deal one more card to the player (use the same card image for now), and then another to the dealer.
Hint:  Is there any code here that is repeated? Is there a way to use write a function to deal from the card to whichever player we chose?

IF - HIT BUTTON CLICKED THEN ONE CARD TO DEALER - 
REPETIVE CODE? 
_ ?/?  add hit functionality ? - use what? IF ELSE? 


Step 6: Creating a deck
create a deck of cards. We can make our "deck" an array of objects. Each one of the objects in the deck will represent a card. Each card will have a rank and a suit. (N.B. the rank is NOT the same as points)
King of Hearts:
{ rank: 13, suit: 'hearts' }
4 of Spades:
{ rank: 4, suit: 'spades' }
Ace of Diamonds:
{ rank: 1, suit: 'diamonds' }
Rather than manually code a whole deck of cards, we can write a function to generate a deck of 52 cards. Create a function buildDeck returns a new array with 52 card objects. There are 4 suits: diamonds, clubs, hearts and spades. For each suit there is a rank from 1 to 13.

- ? ARRAY ? - plug in 
const deck = [
  " ",
  " ",
  " "
];

Step 7: Deal the deck
Now that we have a deck of cards, we want to make use of it. We're going to need to create something to represent the player and dealer hands so go ahead and create two new arrays:
* dealerHand
* playerHand
These arrays of cards will later be used to calculate the total points for the hand.
Adjust the code so that when we click the "Deal" button, it will remove a card from the deck, then place that card into the playerHand array.
Hint: Is there an array method allows us to remove and return an item from an array?
Gameplay should still deal the same as before: 1 card each to player, dealer, player, dealer.

- 2 NEW ARRAYS 
- DEALER HAND 
- PLAYER HAND 

CLICK - EVENT HANDLER - REMOVE CARD FROM DECK THEN PLACE IN “PLAYER HAND ARRAY” 
ARRAY METHOD - THAT REMOVES & RETURNS - 

A Callback Example
Let’s take an example and start without a callback first and then refactor later. Imagine you have a general-purpose function that does some complicated work and returns a large data set as a result. This generic function could be called, for example, findNodes(), and its task would be to crawl the DOM tree of a page and return an array of page elements that are interesting to you:
var findNodes = function () {
    var i = 100000, // big, heavy loop
        nodes = [], // stores the result
        found; // the next node found
    while (i) {
        i -= 1;
        // complex logic here...
        nodes.push(found);
    }
    return nodes;
};

explanation - The function findNodes() does something like this:
var findNodes = function (callback) {
    // ...
    if (typeof callback === "function") {
        callback(found);
    }
    // ...
};


https://www.oreilly.com/library/view/javascript-patterns/9781449399115/ch04.html



Step 8: Image From Cards

folder of images with the following naming structure:
images/{rank}_of_{suit}.png
For example:
* 5_of_hearts.png
* ace_of_spades.png
* jack_of_diamonds.png


In order to put a card visually on the page, we need to insert an    tag, example:


<img src="/page/images/5_of_hearts.png" alt="5 of hearts" />

Before, we were displaying images using the full, hard-coded URL for a specific card. Now we want to use the card objects to set the src attribute based on the card object.

Write a function getCardImage that will take a card object and return an image element containing the correct image URL for that card. As an example (this is not code you should use), the following code takes a single card and attaches the appropriate card image to the body of the page:

const card = { rank: 13, suit: 'hearts' };
const newCardImage = getCardImage(card)
document.body.append(newCardImage);

FUNCTION - “elements - plural” not single 
Select card - URL for card 
Return specific card 


Step 9: Render Hands ??? 
Now that we have a way to create an image based on a card object, we need to display the player hand and the dealer hand on the page.
Write a function render that loops over the dealerHand and playerHand arrays and appends a new card image to the appropriate elements for each card in the hands.

- How do I display a player hand ? - link to array? 
- Display dealer hand? - link to array? 

- Write function render? What is function render? 
- Appends new card image to elements ? - for each card in the hands? 

review: 
https://www.w3schools.com/react/react_render.asp

————————————————————————————

 (Links to an external site.)

Step 10: Shuffle the Deck
Write a function to shuffle the deck. Here are some strategies for shuffling the deck:
* For fixed number of times, randomly choose 2 cards within the deck and swap them.
* Create a new array, randomly choose one card after another from the original array and push it to the new array.
* Search on StackOverflow for a solution to "shuffle a javascript array"
Use the shuffle function to shuffle the deck when you hit the deal button but before you deal the cards.

FUNTION to SHUFFLE DECK??? 

A few times - choose 2 cards and swap them? 
Array - one card after another - from original array & push to new array? 
 Shuffle function? 

- https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array 
- Resource: https://javascript.info/array-methods#shuffle-an-array


Step 11: Calculate points for a hand
function calculatePoints that takes in an array of card objects and returns the points for that hand. 

Example:
const playerHand = [ 
     { rank: 10, suit: 'diamonds' }, 
     { rank: 12, suit: 'spades'} 
];
const playerPoints = calculatePoints(playerHand);
console.log(playerPoints);
// 20
const playerHand = [ 
     { rank: 10, suit: 'diamonds' }, 
     { rank: 1, suit: 'clubs'} 
];
const playerPoints = calculatePoints(playerHand);
console.log(playerPoints);
// 21

- ? 


Step 12: Display points
After dealing any card, display the current points for the dealer and the player. You may want to consider adding this code to your render function.

? 


Step 13: Busts
Check for busts after each card is dealt. A bust is when either the dealer or the player's hand go over 21 points. When that happens, they lose. If there is a bust, display a  message on the page saying that they busted. There is a div with an id of messages already on the page that you can use to do this.


-? 

Step 14: Player stands
When the "Stand" button is clicked, the player doesn't want any more cards. Deal cards to the dealer until he reaches 17 points or more.


-? 

Step 15: Determine winner

When the dealer's turn is over, whoever has the most points wins. Determine the winner. Display a message to show who won. You might also want to disable the "Deal", "Hit", and "Stand" buttons at this point.


- ? 
Step 16: Restart game
The last step is to be able to reset the game. What is involved with this? Is there code we can reuse? Is there a way to reset the dealer and player hands? What about the buttons? Do they need to be re-enabled? The messages?


Notes:

let x = muFunction();     //this x will be the object object


function myFunction() {
    return this;
    
}
var suits = ["spades", "diamonds", "clubs", "hearts"];
var rank = [ "A", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"];
 
function createDeck()
{
    let deck = new Array();

    for(let i = 0; i < suites.length; i++)
{
        for(let x = 0; x < values.length; x++)
        {
            let card = {Value: values[x], Suit; suits[i]};
            deck.push(card);
        }
}

return deck;

function shuffle(deck)
{ 
    // for 1000 turns
    // switch the values of two random cards
    for (let i = 0; i <1000; i++)
    {
        let location1 =  Math.floor((Math.random() * deck.length));
        let location2 =  Math.floor((Math.random() * deck.length));
        let tmp = deck[location1];

        deck[location1] = deck[location2];
        deck[location2] = tmp;
    }
}


slice()
slice(start)
slice(start, end)
